import { useQuery } from 'react-query';
import { Link } from 'react-router-dom';
import { 
  MapPin, 
  Wheat, 
  CheckSquare, 
  TrendingUp,
  Calendar,
  Cloud,
  AlertTriangle,
  Plus,
  Database,
  ArrowUpRight,
  Activity,
  Eye
} from 'lucide-react';
import { useAuth } from '../../contexts/FirebaseAuthContext';
import { farmsService, cropsService, tasksService } from '../../services/firebaseService';
import { LoadingSpinner } from '../../components/ui/LoadingSpinner';
import { formatDate, formatArea } from '@campo360/lib';
import { createSampleData } from '../../utils/sampleData';

// Importar los nuevos componentes del dashboard
import { ProductivityChart } from '../../components/dashboard/ProductivityChart';
import { TasksCalendar } from '../../components/dashboard/TasksCalendar';
import { WeatherAlerts } from '../../components/dashboard/WeatherAlerts';
import { FinancialSummary } from '../../components/dashboard/FinancialSummary';

export default function DashboardPage() {
  const { currentUser } = useAuth();

  // Si no hay usuario autenticado, no hacer queries
  const userId = currentUser?.uid;

  // Queries para obtener datos del dashboard
  const { data: farms = [], isLoading: farmsLoading, refetch: refetchFarms } = useQuery(
    ['farms', userId], 
    () => farmsService.getFarms(userId!),
    { enabled: !!userId }
  );
  
  const { data: crops = [], isLoading: cropsLoading, refetch: refetchCrops } = useQuery(
    ['crops', userId], 
    () => cropsService.getCrops(userId!),
    { enabled: !!userId }
  );
  
  const { data: tasks = [], isLoading: tasksLoading, refetch: refetchTasks } = useQuery(
    ['tasks', userId], 
    () => tasksService.getTasks(userId!),
    { enabled: !!userId }
  );

  // Funci√≥n para crear datos de prueba
  const handleCreateSampleData = async () => {
    if (!userId) return;
    
    try {
      console.log('üå± Creando datos de prueba...');
      await createSampleData(userId);
      
      // Refrescar todas las queries para mostrar los nuevos datos
      await Promise.all([
        refetchFarms(),
        refetchCrops(), 
        refetchTasks()
      ]);
      
      alert('‚úÖ ¬°Datos de prueba creados exitosamente! Revisa tu dashboard.');
    } catch (error) {
      console.error('Error creando datos de prueba:', error);
      alert('‚ùå Error creando datos de prueba. Revisa la consola.');
    }
  };

  // C√°lculos para las estad√≠sticas
  const totalFarms = farms?.length || 0;
  const totalArea = farms?.reduce((sum, farm) => sum + farm.size, 0) || 0;
  
  // Tareas pendientes y vencidas - actualizar l√≥gica para Firebase
  const pendingTasks = tasks?.filter(task => task.status === 'pending') || [];
  
  // Para tareas vencidas, comparamos con la fecha actual
  const now = new Date();
  const overdueTasks = tasks?.filter(task => {
    const dueDate = task.dueDate.toDate();
    return dueDate < now && task.status !== 'completed';
  }) || [];

  // Cultivos por estado
  const activeCrops = crops?.filter(crop => crop.status === 'growing') || [];

  const stats = [
    {
      name: 'Fincas',
      value: totalFarms,
      icon: MapPin,
      color: 'text-blue-600',
      bgColor: 'bg-blue-100',
      href: '/farms',
    },
    {
      name: 'Cultivos Activos',
      value: activeCrops.length,
      icon: Wheat,
      color: 'text-green-600',
      bgColor: 'bg-green-100',
      href: '/crops',
    },
    {
      name: 'Tareas Pendientes',
      value: pendingTasks.length,
      icon: CheckSquare,
      color: 'text-yellow-600',
      bgColor: 'bg-yellow-100',
      href: '/tasks',
    },
    {
      name: '√Årea Total',
      value: `${formatArea(totalArea)}`,
      icon: TrendingUp,
      color: 'text-purple-600',
      bgColor: 'bg-purple-100',
    },
  ];

  if (farmsLoading || cropsLoading || tasksLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <LoadingSpinner size="lg" />
        <span className="ml-3 text-gray-600">Cargando dashboard...</span>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      {/* Enhanced Header */}
      <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center space-y-4 lg:space-y-0">
        <div className="flex-1">
          <div className="flex items-center space-x-3 mb-2">
            <div className="w-12 h-12 bg-gradient-to-br from-emerald-400 to-emerald-600 rounded-2xl flex items-center justify-center">
              <Activity className="w-6 h-6 text-white" />
            </div>
            <div>
              <h1 className="text-3xl font-bold bg-gradient-to-r from-slate-800 to-slate-600 bg-clip-text text-transparent">
                Dashboard Principal
              </h1>
              <p className="text-slate-600 text-lg">
                Bienvenido, {currentUser?.displayName?.split(' ')[0] || currentUser?.email?.split('@')[0] || 'Usuario'} ÔøΩ‚Äçüåæ
              </p>
            </div>
          </div>
          <p className="text-slate-500 max-w-2xl">
            Monitorea y gestiona todas las actividades de tu operaci√≥n agr√≠cola desde un solo lugar. 
            Mantente al d√≠a con tus cultivos, tareas y productividad.
          </p>
        </div>
        
        <div className="flex flex-col sm:flex-row items-start sm:items-center space-y-3 sm:space-y-0 sm:space-x-4">
          {/* Bot√≥n temporal para crear datos de prueba */}
          {totalFarms === 0 && (
            <button
              onClick={handleCreateSampleData}
              className="inline-flex items-center px-4 py-3 bg-gradient-to-r from-emerald-500 to-emerald-600 text-white text-sm font-semibold rounded-xl hover:from-emerald-600 hover:to-emerald-700 focus:outline-none focus:ring-2 focus:ring-emerald-500/20 transition-all duration-200 shadow-lg hover:shadow-xl"
            >
              <Database className="w-4 h-4 mr-2" />
              Crear Datos de Prueba
            </button>
          )}
          
          <div className="flex items-center space-x-4 text-sm">
            <div className="flex items-center px-3 py-2 bg-blue-50 text-blue-700 rounded-lg">
              <Calendar className="w-4 h-4 mr-2" />
              {formatDate(new Date(), 'long')}
            </div>
            <div className="flex items-center px-3 py-2 bg-orange-50 text-orange-700 rounded-lg">
              <Cloud className="w-4 h-4 mr-2" />
              24¬∞C Soleado
            </div>
          </div>
        </div>
      </div>

      {/* Enhanced Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {stats.map((stat, index) => {
          const Icon = stat.icon;
          const gradients = [
            'from-blue-500 to-blue-600',
            'from-emerald-500 to-emerald-600', 
            'from-amber-500 to-amber-600',
            'from-purple-500 to-purple-600'
          ];
          const bgGradients = [
            'from-blue-50 to-blue-100',
            'from-emerald-50 to-emerald-100',
            'from-amber-50 to-amber-100', 
            'from-purple-50 to-purple-100'
          ];
          
          return (
            <div key={stat.name} className="group relative">
              <div className="bg-white rounded-2xl p-6 shadow-sm border border-gray-100 hover:shadow-lg transition-all duration-300 hover:-translate-y-1">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className={`w-12 h-12 bg-gradient-to-br ${gradients[index]} rounded-xl flex items-center justify-center shadow-lg mb-4`}>
                      <Icon className="w-6 h-6 text-white" />
                    </div>
                    <p className="text-sm font-semibold text-slate-600 mb-1">{stat.name}</p>
                    <p className="text-3xl font-bold text-slate-900 mb-2">{stat.value}</p>
                    
                    {stat.href && (
                      <Link
                        to={stat.href}
                        className="inline-flex items-center text-sm font-medium text-emerald-600 hover:text-emerald-700 transition-colors"
                      >
                        Ver detalles
                        <ArrowUpRight className="w-4 h-4 ml-1 group-hover:translate-x-0.5 group-hover:-translate-y-0.5 transition-transform" />
                      </Link>
                    )}
                  </div>
                  
                  <button className="p-2 text-slate-400 hover:text-slate-600 rounded-lg hover:bg-slate-50 transition-colors">
                    <Eye className="w-4 h-4" />
                  </button>
                </div>
                
                {/* Decorative gradient background */}
                <div className={`absolute inset-0 bg-gradient-to-br ${bgGradients[index]} opacity-0 group-hover:opacity-5 rounded-2xl transition-opacity duration-300`}></div>
              </div>
            </div>
          );
        })}
      </div>

      {/* Alertas importantes */}
      {overdueTasks.length > 0 && (
        <div className="bg-gradient-to-r from-red-50 to-red-100 border border-red-200 rounded-2xl p-6 shadow-sm">
          <div className="flex items-start space-x-4">
            <div className="w-10 h-10 bg-red-500 rounded-xl flex items-center justify-center flex-shrink-0">
              <AlertTriangle className="w-5 h-5 text-white" />
            </div>
            <div className="flex-1">
              <h3 className="text-lg font-semibold text-red-800 mb-1">
                ‚ö†Ô∏è Tienes {overdueTasks.length} tarea{overdueTasks.length > 1 ? 's' : ''} vencida{overdueTasks.length > 1 ? 's' : ''}
              </h3>
              <p className="text-red-700 mb-3">
                Es importante completar estas tareas para mantener la productividad de tus cultivos.
              </p>
              <Link
                to="/tasks"
                className="inline-flex items-center px-4 py-2 bg-red-600 text-white text-sm font-semibold rounded-xl hover:bg-red-700 transition-colors"
              >
                Ver tareas vencidas ‚Üí
              </Link>
            </div>
          </div>
        </div>
      )}

      {/* Advanced Dashboard Components */}
      <div className="grid grid-cols-1 xl:grid-cols-2 gap-8">
        {/* Gr√°fico de Productividad */}
        <div className="bg-white rounded-2xl shadow-sm border border-gray-100 overflow-hidden">
          <ProductivityChart farms={farms} crops={crops} />
        </div>

        {/* Calendario de Tareas */}
        <div className="bg-white rounded-2xl shadow-sm border border-gray-100 overflow-hidden">
          <TasksCalendar tasks={tasks} />
        </div>
      </div>

      {/* Alertas Meteorol√≥gicas y Resumen Financiero */}
      <div className="grid grid-cols-1 xl:grid-cols-2 gap-8">
        <div className="bg-white rounded-2xl shadow-sm border border-gray-100 overflow-hidden">
          <WeatherAlerts />
        </div>
        <div className="bg-white rounded-2xl shadow-sm border border-gray-100 overflow-hidden">
          <FinancialSummary farms={farms} crops={crops} tasks={tasks} />
        </div>
      </div>

        {/* Calendario de Tareas */}
        <TasksCalendar tasks={tasks} />
      </div>

      {/* Alertas Meteorol√≥gicas y Resumen Financiero */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <WeatherAlerts />
        <FinancialSummary farms={farms} crops={crops} tasks={tasks} />
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Tareas Recientes */}
        <div className="card">
          <div className="card-header">
            <div className="flex items-center justify-between">
              <h3 className="card-title">Tareas Recientes</h3>
              <Link
                to="/tasks"
                className="text-sm text-primary-600 hover:text-primary-500 font-medium"
              >
                Ver todas
              </Link>
            </div>
          </div>
          
          <div className="space-y-3">
            {tasks?.slice(0, 5).map((task) => (
              <div key={task.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div className="flex-1">
                  <p className="font-medium text-gray-900">{task.title}</p>
                  <p className="text-sm text-gray-600">
                    {task.description} ‚Ä¢ {formatDate(task.dueDate.toDate())}
                  </p>
                </div>
                <span className={`badge ${
                  task.status === 'completed' ? 'badge-success' :
                  task.status === 'in-progress' ? 'badge-info' :
                  'badge-gray'
                }`}>
                  {task.status === 'completed' ? 'Completada' :
                   task.status === 'in-progress' ? 'En Progreso' :
                   'Pendiente'}
                </span>
              </div>
            ))}
            
            {(!tasks || tasks.length === 0) && (
              <div className="text-center py-8">
                <p className="text-gray-500">No tienes tareas registradas</p>
                <Link
                  to="/tasks"
                  className="inline-flex items-center mt-2 text-sm font-medium text-primary-600 hover:text-primary-500"
                >
                  <Plus className="w-4 h-4 mr-1" />
                  Crear primera tarea
                </Link>
              </div>
            )}
          </div>
        </div>

        {/* Cultivos Activos */}
        <div className="card">
          <div className="card-header">
            <div className="flex items-center justify-between">
              <h3 className="card-title">Cultivos Activos</h3>
              <Link
                to="/crops"
                className="text-sm text-primary-600 hover:text-primary-500 font-medium"
              >
                Ver todos
              </Link>
            </div>
          </div>
          
          <div className="space-y-3">
            {activeCrops.slice(0, 5).map((crop) => (
              <div key={crop.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div className="flex-1">
                  <p className="font-medium text-gray-900">{crop.name}</p>
                  <p className="text-sm text-gray-600">
                    {crop.variety} ‚Ä¢ Plantado: {formatDate(crop.plantedDate.toDate())}
                  </p>
                </div>
                <span className="badge badge-success">
                  {crop.status === 'growing' ? 'En Crecimiento' :
                   crop.status === 'ready' ? 'Listo' :
                   crop.status === 'harvested' ? 'Cosechado' : 'Plantado'}
                </span>
              </div>
            ))}
            
            {activeCrops.length === 0 && (
              <div className="text-center py-8">
                <p className="text-gray-500">No tienes cultivos activos</p>
                <Link
                  to="/crops"
                  className="inline-flex items-center mt-2 text-sm font-medium text-primary-600 hover:text-primary-500"
                >
                  <Plus className="w-4 h-4 mr-1" />
                  Registrar cultivo
                </Link>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Acciones R√°pidas */}
      <div className="card">
        <div className="card-header">
          <h3 className="card-title">Acciones R√°pidas</h3>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <Link
            to="/farms"
            className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors duration-200"
          >
            <MapPin className="w-8 h-8 text-blue-600 mr-3" />
            <div>
              <p className="font-medium text-gray-900">Nueva Finca</p>
              <p className="text-sm text-gray-600">Registra una nueva finca</p>
            </div>
          </Link>
          
          <Link
            to="/crops"
            className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors duration-200"
          >
            <Wheat className="w-8 h-8 text-green-600 mr-3" />
            <div>
              <p className="font-medium text-gray-900">Nuevo Cultivo</p>
              <p className="text-sm text-gray-600">Registra un nuevo cultivo</p>
            </div>
          </Link>
          
          <Link
            to="/tasks"
            className="flex items-center p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors duration-200"
          >
            <CheckSquare className="w-8 h-8 text-yellow-600 mr-3" />
            <div>
              <p className="font-medium text-gray-900">Nueva Tarea</p>
              <p className="text-sm text-gray-600">Programa una nueva tarea</p>
            </div>
          </Link>
        </div>
      </div>
    </div>
  );
}
